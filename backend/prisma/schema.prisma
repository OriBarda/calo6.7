// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile     UserProfile?
  meals       Meal[]
  mealPlans   MealPlan[]
  devices     Device[]
  menuCache   MenuCache?

  @@map("users")
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  age               Int?
  gender            String?
  height            Float?   // in cm
  weight            Float?   // in kg
  activityLevel     String?  // sedentary, light, moderate, active, very_active
  goals             String[] // weight_loss, weight_gain, muscle_gain, maintenance
  dietaryRestrictions String[] // vegetarian, vegan, gluten_free, etc.
  allergies         String[]
  preferences       String[]
  targetCalories    Int?
  targetProtein     Float?
  targetCarbs       Float?
  targetFat         Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Meal {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  imageUrl    String?
  imageBase64 String?
  calories    Float
  protein     Float
  carbs       Float
  fat         Float
  fiber       Float?
  sugar       Float?
  sodium      Float?
  mealType    String   // breakfast, lunch, dinner, snack
  consumedAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // AI Analysis fields
  confidence    Float?
  ingredients   String[]
  servingSize   String?
  brand         String?
  barcode       String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("meals")
}

model MealPlan {
  id                  String   @id @default(cuid())
  userId              String
  name                String?
  targetCalories      Int
  duration            Int      // days
  dietaryRestrictions String[]
  preferences         String[]
  meals               Json     // DailyMealPlan[]
  isActive            Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("meal_plans")
}

model MenuCache {
  id        String   @id @default(cuid())
  userId    String   @unique
  menus     Json     // RecommendedMenu[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("menu_cache")
}

model Device {
  id           String   @id @default(cuid())
  userId       String
  name         String
  type         String   // fitbit, apple_health, google_fit, etc.
  deviceId     String   // external device identifier
  accessToken  String?
  refreshToken String?
  isActive     Boolean  @default(true)
  lastSyncAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  healthData   HealthData[]

  @@unique([userId, deviceId])
  @@map("devices")
}

model HealthData {
  id        String   @id @default(cuid())
  deviceId  String
  type      String   // steps, calories_burned, heart_rate, sleep, etc.
  value     Float
  unit      String   // steps, kcal, bpm, hours, etc.
  timestamp DateTime
  metadata  Json?    // additional data specific to the metric
  createdAt DateTime @default(now())

  // Relations
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("health_data")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  type        String   // meal_logged, goal_updated, device_synced, etc.
  description String
  metadata    Json?
  createdAt   DateTime @default(now())

  @@map("activity_logs")
}